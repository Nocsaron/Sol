#!/usr/bin/env python

from __future__ import print_function

"""
r.series.distributed:  This program was written by N R Callahan in Spring 2015. 
See manual pages for details.
(C) 2014 Copywrite N R Callahan, University of Arizona, Tucson, Arizona
email: nicholas.r.callahan@gmail.com
"""

"""
INSERT LICENSE HERE
"""



#Globals
MONTHS=["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"]
MONTH_DAYS=[[1,31],[32,59],[60,90],[91,120],[121,150],[152,181],[182,212],[213,243],[244,273],[274,304],[305,334],[335,365]]



#Default printing functions
def error(*objs):
    print("ERROR: ", *objs, file=sys.stderr)
    exit(1)
def warning(*objs):
    print("WARNING: ", *objs, file=sys.stderr)

#Imports
import argparse
import sys, os
import imp

#We need work_queue to be installed, but want to die gracefully
try:
    imp.find_module('work_queue')
    found = True
except ImportError:
    error("Could not find work_queue.\n\tAdd work_queue module location to PYTHONPATH")
    exit(1)
if found:
    from work_queue import *

#Get install location
script_location=os.path.abspath(os.path.dirname(sys.argv[0]))

def load_monthly_tasks(wq,proj_dir):
    tasks = 0 
    rmean = os.path.join(script_location,"rmean.sh")
    i = 0
##--There will be one task per month
    for month in MONTHS:
        start_day = MONTH_DAYS[i][0]
        end_day   = MONTH_DAYS[i][1]
        command = "./rmean.sh %s -D %s" % (month,proj_dir)
        global_inputs = ""
        insol_inputs = ""
        total_sun_avg = proj_dir+"/global/monthly/total_sun_%s_average.tif" % month
    	hours_sun_avg = proj_dir+"/insol/monthly/hours_sun_%s_average.tif" % month
        total_sun_med = proj_dir+"/global/monthly/total_sun_%s_median.tif" % month
    	hours_sun_med = proj_dir+"/insol/monthly/hours_sun_%s_median.tif" % month
        total_sun_std = proj_dir+"/global/monthly/total_sun_%s_stddev.tif" % month
    	hours_sun_std = proj_dir+"/insol/monthly/hours_sun_%s_stddev.tif" % month
        total_sun_var = proj_dir+"/global/monthly/total_sun_%s_variance.tif" % month
    	hours_sun_var = proj_dir+"/insol/monthly/hours_sun_%s_variance.tif" % month
    ##--Need to create command for every day in this month
        for day in range(start_day,end_day+1):
            global_inputs = global_inputs + " ./global/daily/total_sun_day_%d.tif" % day
            insol_inputs  = insol_inputs  + " ./insol/daily/hours_sun_day_%d.tif" % day
        command = command + global_inputs + " " + insol_inputs
    ##--Create Task
        task = Task(command)
    ##--Input Files
        for day in range(start_day,end_day+1):
            task.specify_input_file(proj_dir+"/global/daily/total_sun_day_%d.tif" % day, "global/daily/total_sun_day_%d.tif" % day, cache = False)
            task.specify_input_file(proj_dir+"/insol/daily/hours_sun_day_%d.tif" % day, "insol/daily/hours_sun_day_%d.tif" % day, cache = False)
	task.specify_input_file(rmean,"rmean.sh",cache=True)
        task.specify_output_file(total_sun_avg, "global/monthly/total_sun_%s_average.tif" %month, cache = False)
        task.specify_output_file(hours_sun_avg, "insol/monthly/hours_sun_%s_average.tif" % month, cache = False)
        task.specify_output_file(total_sun_med, "global/monthly/total_sun_%s_median.tif" %month, cache = False)
        task.specify_output_file(hours_sun_med, "insol/monthly/hours_sun_%s_median.tif" % month, cache = False)
        task.specify_output_file(total_sun_std, "global/monthly/total_sun_%s_stddev.tif" %month, cache = False)
        task.specify_output_file(hours_sun_std, "insol/monthly/hours_sun_%s_stddev.tif" % month, cache = False)
        task.specify_output_file(total_sun_var, "global/monthly/total_sun_%s_variance.tif" %month, cache = False)
        task.specify_output_file(hours_sun_var, "insol/monthly/hours_sun_%s_variance.tif" % month, cache = False)
    ##--Submit
        wq.submit(task)
        tasks = tasks+1
        i = i + 1
    return wq, tasks
def load_annual_tasks(wq,proj_dir):
    tasks = 0
    rmean="rmean.sh"
    global_inputs = ""
    insol_inputs  = ""
    command="./rmean.sh annual -D %s" % proj_dir
    total_sun_avg = proj_dir+"/global/annual/total_sun_annual_average.tif" 
    hours_sun_avg = proj_dir+"/insol/annual/hours_sun_annual_average.tif" 
    total_sun_med = proj_dir+"/global/annual/total_sun_annual_median.tif" 
    hours_sun_med = proj_dir+"/insol/annual/hours_sun_annual_median.tif" 
    total_sun_std = proj_dir+"/global/annual/total_sun_annual_stddev.tif" 
    hours_sun_std = proj_dir+"/insol/annual/hours_sun_annual_stddev.tif" 
    total_sun_var = proj_dir+"/global/annual/total_sun_annual_variance.tif" 
    hours_sun_var = proj_dir+"/insol/annual/hours_sun_annual_variance.tif" 
##--Need to create command for every day in the year
    for day in range(1,366):
        global_inputs = global_inputs + " ./global/daily/total_sun_day_%d.tif" % day
        insol_inputs  = insol_inputs  + " ./insol/daily/hours_sun_day_%d.tif" % day
    command = command + global_inputs + " " + insol_inputs
##Create Task
    task = Task(command)
##--Input Files
    for day in range(1, 366):
        task.specify_input_file(proj_dir+"/global/daily/total_sun_day_%d.tif" % day, "global/daily/total_sun_day_%d.tif" % day, cache = False)
        task.specify_input_file(proj_dir+"/insol/daily/hours_sun_day_%d.tif" % day, "insol/daily/hours_sun_day_%d.tif" % day, cache = False)
    task.specify_input_file(rmean,"rmean.sh",cache=True)
    task.specify_output_file(total_sun_avg, "global/monthly/total_sun_annual_average.tif", cache = False)
    task.specify_output_file(hours_sun_avg, "insol/monthly/hours_sun_annual_average.tif", cache = False)
    task.specify_output_file(total_sun_med, "global/monthly/total_sun_annual_median.tif", cache = False)
    task.specify_output_file(hours_sun_med, "insol/monthly/hours_sun_annual_median.tif", cache = False)
    task.specify_output_file(total_sun_std, "global/monthly/total_sun_annual_stddev.tif", cache = False)
    task.specify_output_file(hours_sun_std, "insol/monthly/hours_sun_annual_stddev.tif", cache = False)
    task.specify_output_file(total_sun_var, "global/monthly/total_sun_annual_variance.tif", cache = False)
    task.specify_output_file(hours_sun_var, "insol/monthly/hours_sun_annual_variance.tif", cache = False)
    wq.submit(task)
    tasks = tasks + 1
    return wq,tasks
def main():
##--Set up Arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('--with-workqueue',dest="workqueue")
    parser.add_argument('--frequency','-f',dest="freq")
    parser.add_argument('--name','-f',dest="name")
    parser.add_argument('--directory','-d',dest="dir")
    parser.add_argument('args',nargs=1)
    args = parser.parse_args()
##--Get arguments from argparser (for readability)
    dem = args.args[0]
    workqueue=args.workqueue
    freq=args.freq
    port = 9101
    name = args.name
    projDir = args.dir
##--Argument Validation
##--Name
    if not name:
        name = "r.series.dist"
##--Directory
    if not projDir:
        projDir = os.path.join("./",os.path.basename(dem)[:-4])
    if not os.path.exists(os.path.join(projDir,"global")):
        error("We cannot find the results of r.sun.distributed")
##--Frequency
    if freq != "MONTHLY" and freq != "ANNUAL":
        error("Frequency must be \"MONTHLY\" or \"ANNUAL\"")
##--Workqueue
    if not workqueue:
        try:
            workqueue = WorkQueue(port)
            workqueue.specify_name(name)
            cctools_debug_flags_set("all")
            cctools_debug_config_file("wq.debug")
        except:
            error("WorkQueue not created")
##--Call correct series task
    if freq == "MONTHLY":
        workqueue, tasks = load_monthly_tasks(workqueue,projDir)        
        print("%d tasks submitted" % tasks)
    elif freq == "ANNUAL":
        workqueue, tasks = load_annual_tasks(workqueue,projDir)

    errors=0
    completed=0
    while not workqueue.empty():
        t = workqueue.wait(5)
        if t:
            if t.return_status != 0:
                warning("Task %d did not return successfully!" % t.id)
                print(t.output)
                errors = errors + 1
            else:
                completed = completed + 1
    if errors == 0:
        print("All tasks completed successfully!")
    else:
        print("%d of %d tasks completed. See outputs for errors" % (completed,tasks))
if __name__ == '__main__':
    main()

